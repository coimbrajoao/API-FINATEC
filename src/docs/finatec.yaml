openapi: 3.0.0
info:
  title: "API finatec"
  version: "1.0.0"
  description: "Documentação da API finatec"

servers:
  - url: http://localhost:8080
    description: Servidor Local

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Autenticação via JWT. Informe o token para acessar a API."

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          minLength: 3
          maxLength: 100
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        confirmedPassword:
          type: string
          minLength: 6
        cpf:
          type: string
          pattern: "^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$"
        admin:
          type: boolean
      required:
        - name
        - email
        - password
        - confirmedPassword
        - admin
        - cpf
      example:
        name: "João"
        email: "joao@example.com"
        password: "123456"
        confirmedPassword: "123456"
        admin: false
        cpf: "123.456.789-00"

    Login:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
      required:
        - email
        - password
      example:
        email: "joao@example.com"
        password: "123456"

    Token:
      type: object
      properties:
        token:
          type: string
      example:
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          maxLength: 255
      required:
        - name
        - description
      example:
        name: "Alimentação"
        description: "Categoria de alimentação"

    Error:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Usuário não encontrado"

tags:
  - name: "Auth"
    description: "Operações de autenticação"
  - name: "User"
    description: "Operações de gerenciamento de usuários"
  - name: "Category"
    description: "Operações de gerenciamento de categorias"

paths:
  /auth/signup:
    post:
      summary: "Cadastrar usuário"
      description: "Registra um novo usuário"
      tags:
        - "Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            examples:
              example1:
                value:
                  name: "João"
                  email: "joao@example.com"
                  password: "123456"
                  confirmedPassword: "123456"
                  admin: false
                  cpf: "123.456.789-00"
      responses:
        "201":
          description: "Usuário cadastrado com sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Usuário já cadastrado ou dados inválidos"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Erro interno do servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth:
    post:
      summary: "Login"
      description: "Efetua o login e retorna um token JWT"
      tags:
        - "Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
            examples:
              example1:
                value:
                  email: "joao@example.com"
                  password: "123456"
      responses:
        "200":
          description: "Login efetuado com sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          description: "Credenciais inválidas"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Erro interno do servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users:
    get:
      summary: "Listar todos os usuários"
      description: "Retorna uma lista de todos os usuários"
      tags:
        - "User"
      security:
        - bearerAuth: []
      parameters:
      - name: page
        in: query
        required: false
        description: "Número da página"
        schema:
          type: integer
          default: 1
      - name: limit
        in: query
        required: false
        description: "Número de itens por página"
        schema:
          type: integer
          default: 10
      responses:
        "200":
          description: "Usuários listados com sucesso"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: "Não autorizado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Erro interno do servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: "Cadastrar usuário"
      description: "Registra um novo usuário"
      tags:
        - "User"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            examples:
              example1:
                value:
                  name: "João"
                  email: "joao@example.com"
                  password: "123456"
                  confirmedPassword: "123456"
                  admin: false
                  cpf: "123.456.789-00"
      responses:
        "201":
          description: "Usuário cadastrado com sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Usuário já cadastrado ou dados inválidos"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Erro interno do servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    get:
      summary: "Buscar usuário por ID"
      description: "Retorna um usuário pelo ID"
      tags:
        - "User"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID do usuário"
          schema:
            type: integer
      responses:
        "200":
          description: "Usuário encontrado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "Usuário não encontrado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Erro interno do servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: "Atualizar usuário"
      description: "Atualiza um usuário existente"
      tags:
        - "User"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID do usuário"
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "Usuário atualizado com sucesso"
        "400":
          description: "Dados inválidos"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "Usuário não encontrado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Erro interno do servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: "Deletar usuário"
      description: "Deleta um usuário pelo ID"
      tags:
        - "User"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID do usuário"
          schema:
            type: integer
      responses:
        "200":
          description: "Usuário deletado com sucesso"
        "404":
          description: "Usuário não encontrado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Erro interno do servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /category:
    get:
      summary: "Listar todas as categorias"
      description: "Retorna uma lista de todas as categorias"
      tags:
        - "Category"
      security:
        - bearerAuth: []
      parameters:
      - name: page
        in: query
        required: false
        description: "Número da página"
        schema:
          type: integer
          default: 1
      - name: limit
        in: query
        required: false
        description: "Número de itens por página"
        schema:
          type: integer
          default: 10
      responses:
        "200":
          description: "Categorias listadas com sucesso"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        "401":
          description: "Não autorizado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Erro interno do servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: "Cadastrar categoria"
      description: "Registra uma nova categoria (somente administrador)"
      tags:
        - "Category"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
            examples:
              example1:
                value:
                  name: "Alimentação"
                  description: "Categoria de alimentação"
      responses:
        "201":
          description: "Categoria cadastrada com sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "409":
          description: "Categoria já cadastrada"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Erro interno do servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /category/{id}:
    get:
      summary: "Buscar categoria por ID"
      description: "Retorna uma categoria pelo ID"
      tags:
        - "Category"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID da categoria"
          schema:
            type: integer
      responses:
        "200":
          description: "Categoria encontrada"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: "Categoria não encontrada"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Erro interno do servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: "Atualizar categoria"
      description: "Atualiza uma categoria existente"
      tags:
        - "Category"
      security:
        - bearerAuth: []
      parameters: 
        - name: id
          in: path
          required: true
          description: "ID da categoria"  
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "200":
          description: "Categoria atualizada com sucesso"
        "400":
          description: "Dados inválidos"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "Categoria não encontrada"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Erro interno do servidor"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: "Deletar categoria"
      description: "Deleta uma categoria pelo ID"
      tags:
        - "Category"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID da categoria"
          schema:
            type: integer
      responses:
        "200":
          description: "Categoria deletada com sucesso"
        "404":
          description: "Categoria não encontrada"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"